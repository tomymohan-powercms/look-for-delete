<?php

error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);

module_load_include('inc','look_for_delete','look_for_delete');
/**
 * Implements hook_menu()
 */
function look_for_delete_menu() {
  $item = array();
  $item['delete-contents'] = array(
    'title' => 'CONTENT DELETE',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('look_for_delete_form'),
    'access arguments' => array('access content'),
    'description' => 'To delete the contents',
    //'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );

  $item['update-contents'] = array(
    'title' => 'CONTENT UPDATE',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('look_for_delete_confirm_form'),
    'access arguments' => array('access content'),
    'description' => 'To update the contents',
    'type' => MENU_CALLBACK,
  );
  return $item;
}

/**
 * Custom form handler for lfd form
 *
 * @param $form
 *  Form object
 * @param $form_state
 *  Form state values
 *
 * @return $form
 */
function look_for_delete_form($form, &$form_state) {
  $form['#action'] = url('update-contents');
  $form['#multistep'] = TRUE;
  $content_types = node_type_get_names();
  $form ['content_type'] =array(
    '#type' => 'fieldset'
  );
  $form['content_type']['select_content_type'] = array(
    '#type' => 'select',
    '#title' => t('Content Type Selection'),
    '#required' => TRUE,
    '#options' => $content_types,
    '#ajax' => array(
      'callback' => 'look_for_delete_field_table',
      'wrapper' => 'delete-form-wrapper',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['nodes'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#tree' => TRUE,
    '#theme' => 'look_for_delete_theme_field_table',
    '#prefix' => '<div id ="delete-form-wrapper">',
    '#suffix' => '</div>',
  );
  $form['range'] = array(
    '#type' => 'textfield',
    '#title' =>t('Range'),
    '#size' => '15'
  );
  $answer = array(
    'delete_user' => t('Delete user added to the content'),
  );
  $form['userdelete'] = array(
    '#type' => 'checkboxes',
    '#options' => $answer,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#submit' => array('look_for_delete_confirm_form'),
  );
  $default_content = isset($form_state['input']['select_content_type']) ?
    $form_state['input']['select_content_type'] : '';
  $machine_name = field_info_instances('node', $default_content);
  $options = array(
    'delete' => t('Delete'),
    'publish' => t('Publish'),
    'unpublish' => t('Unpublish'),
  );
  if (!empty($default_content)) {
    //title_name search row.
    $field_title_operators = array(
      '=' => 'Equal to',
      '!=' => 'Not Equal to',
      'NOT LIKE' => 'Does not contain',
      'LIKE' => 'Contains',
    );
    $form['nodes']['title']['fieldname'] = array(
      '#type' => 'markup',
      '#markup' => 'Title',
      '#size' => '20',
    );
    $form['nodes']['title']['operator'] = array(
      '#type' => 'select',
      '#options' => $field_title_operators,
    );
    $form['nodes']['title']['search_name'] = array(
      '#type' => 'textfield',
      '#size' => '20',
    );

    //field_info search rows.
    foreach ($machine_name as $key => $value) {
      $form['nodes'][$key]['fieldname'] = array(
        '#type' => 'markup',
        '#markup' => $value['field_name'],
      );
      if ($machine_name[$key]['widget']['type'] == 'text_textarea_with_summary') {
        $field_operators = array(
          'NOT LIKE' => 'Does not contain',
          'LIKE' => 'Contains',
        );
        $form['nodes'][$key]['operator'] = array(
          '#type' => 'select',
          '#options' => $field_operators,
        );
      }
      elseif ($machine_name[$key]['widget']['type'] == 'number') {
        $field_operators = array(
          '=' => 'Equal to',
          '!=' => 'Not Equal to',
          'LIKE' => 'Contains',
          'NOT LIKE' => 'Does not contain',
          '>' => 'Greater Than',
          '<' => 'Less Than',
          '<=' => 'Less than or Equal to',
          '>=' => 'Greater than or Equal to'
        );
        $form['nodes'][$key]['operator'] = array(
          '#type' => 'select',
          '#options' => $field_operators,
        );
      }
      else {
        $field_operators = array(
          '=' => 'Equal to',
          '!=' => 'Not Equal to',
          'NOT LIKE' => 'Does not contain',
          'LIKE' => 'Contains',
        );
        $form['nodes'][$key]['operator'] = array(
          '#type' => 'select',
          '#options' => $field_operators,
        );
      }
      $form['nodes'][$key]['search_name'] = array(
        '#type' => 'textfield',
        '#size' => '20',
      );
    }
    $form['nodes']['update'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
    );
  }
  return $form;
}

/**
 * Custom table for lfd formlook_for_delete_confirm_form
 *
 * @param $form
 *  Form object
 * @param $form_state
 *  Form state values
 *
 * @return $form['nodes']
 */
function look_for_delete_field_table($form, &$form_state) {
  return $form['nodes'];
}

/**
 * Implements hook_theme().
 *
 * @return $theme
 */
function look_for_delete_theme() {
  $theme['look_for_delete_theme_field_table'] = array(
    'render element' => 'element',
  );
  return $theme;
}

/**
 *implement hook_theme_table().
 *
 * @param $variables
 *  Table object
 *
 * @return $output
 */
function theme_look_for_delete_theme_field_table($variables) {
  $element = $variables['element'];
  $rows = array();
  foreach (element_children($element) as $id) {
    // Mark the table row as draggable for TableDrag.
    $row = array(
      'data' => array(),
      'class' => array('draggable'),
    );
    // Render the table columns.
    $row['data'][] = drupal_render($element[$id]['fieldname']);
    $row['data'][] = drupal_render($element[$id]['operator']);
    $row['data'][] = drupal_render($element[$id]['search_name']);
    $rows[] = $row;
  }
  //Build the table header.
  $header = array(
    t('Field Name'),
    t('Operator'),
    t('Desired File Name'),
  );
  // Render the table.
  // Note: For TableSelect instead of TableDrag, you would have specified
  //   'tableselect' as render element #type and passed the $rows as 'options'
  //   instead of 'rows'.
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No content available.'),
    'attributes' => array('id' => 'look-for-delete-order'),
  ));
  $output .= drupal_render_children($element);
  return $output;
}
